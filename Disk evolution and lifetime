program PPDtimeevolution
  implicit none

  real(8)::StellarMass,alpha,Lf,Phie,Lx,dt,Mstar,Md0,Rg,c,tmax,ng,rfpeak,rxpeak
  
  real(8),parameter::pi=3.14159265359_8, yr=3.1536d7, au=1.495978707d13, &
       & rmax=1.0d4, tmaxyr=1.0d8, dr=0.002_8, R1=50., G=6.6743d-8, &
       & kB=1.380649d-16, Msun=1.9884d33, csRg=1.0d6, mH=1.67356d-24, &
       & mmu=1.66054d-24, muu=2.34_8, mu=1.35_8, C1=0.14_8, A=0.3423_8, &
       & B=-0.3612_8, D=0.2457_8, alphaB=2.6d-13, sf0=1.0d-12, sx0=5.1d-12
  
  real(8),allocatable::r(:),t(:),Md(:),cs(:),n0R(:),ulR(:),se(:),sf(:), &
       & sx(:),spe(:),sigma(:,:),S(:,:)
  
  integer::i,j,k,l,m,n,nr,nt,ios

  character::fname_sd*50,fname_md*50,fname1*30,fname2*30,fname3_1*30, &
       &fname3_2*30,fname4_1*30,fname4_2*30,fname5_1*30,fname5_2*30

  !Enter parameters of stellar mass, alpha, L(FUV), Phi(EUV), and L(X) from the terminal's standard input
  write(*,*) 'Input StellarMass [solarmass]:'
  read(*,*) StellarMass

  write(*,*) 'Input alpha:'
  read(*,*) alpha

  write(*,*) 'Input L_FUV [erg s^-1]:'
  read(*,*) Lf

  write(*,*) 'Input Phi_EUV [s^-1]:'
  read(*,*) Phie

  write(*,*) 'Input L_X [erg s^-1]:'
  read(*,*) Lx

  !Set the filename according to the input value
  write(fname1,'(f3.1)') StellarMass
  write(fname2,'(f5.3)') alpha
  write(fname3_1,'(f3.1)') Lf/(10.**int(dlog10(Lf)))
  write(fname3_2,'(i2)') int(dlog10(Lf))
  write(fname4_1,'(f3.1)') Phie/(10.**int(dlog10(Phie)))
  write(fname4_2,'(i2)') int(dlog10(Phie))
  write(fname5_1,'(f3.1)') Lx/(10.**int(dlog10(Lx)))
  write(fname5_2,'(i2)') int(dlog10(Lx))
  fname_sd='SD_'//trim(adjustl(fname1))//'_'//trim(adjustl(fname2))//'_'&
       &//trim(adjustl(fname3_1))//'e'//trim(adjustl(fname3_2))//'_'&
       &//trim(adjustl(fname4_1))//'e'//trim(adjustl(fname4_2))//'_'&
       &//trim(adjustl(fname5_1))//'e'//trim(adjustl(fname5_2))//'.dat'
  fname_md='Md_'//trim(adjustl(fname1))//'_'//trim(adjustl(fname2))//'_'&
       &//trim(adjustl(fname3_1))//'e'//trim(adjustl(fname3_2))//'_'&
       &//trim(adjustl(fname4_1))//'e'//trim(adjustl(fname4_2))//'_'&
       &//trim(adjustl(fname5_1))//'e'//trim(adjustl(fname5_2))//'.dat'

  !Set the time grid spacing according to dr (distance grid spacing)
  tmax=tmaxyr*yr
  dt=dr**2/3.

  Mstar=Msun*StellarMass
  Md0=0.1*Mstar
  Rg=G*Mstar/csRg**2
  
  !Coefficient of the diffusion equation
  c=(3.*10.*(100.*au)**0.5*alpha*kB*tmax)/(4.*(G*Mstar)**0.5*muu*mmu*rmax*au)
  
  ng=C1*(3.*Phie/(4.*pi*alphaB*Rg**3.))**0.5

  !Radius at which photoevaporation begins
  rfpeak=4.0*StellarMass
  rxpeak=2.5*StellarMass
  

  nr=int(1/dr+1)
  allocate(r(nr))

  do i=1,nr
     r(i)=(i-1)*dr
  end do

  nt=int(1/dt+1)
  allocate(t(nt))

  do i=1,nt
     t(i)=(i-1)*dt
  end do

  allocate(Md(nt))
  allocate(cs(nr))
  allocate(n0R(nr))
  allocate(ulR(nr))
  allocate(se(nr))
  allocate(sf(nr))
  allocate(sx(nr))
  allocate(spe(nr))
  allocate(sigma(nt,nr))
  allocate(S(nt,nr))

  Md=0
  cs=0
  n0R=0
  ulR=0
  se=0
  sf=0
  sx=0
  spe=0
  sigma=0
  S=0

  !EUV-evaporation
  do i=2,nr
     cs(i)=csRg*(rmax*r(i)**2.*au/Rg)**(-0.25)
  end do

  do j=2,nr
     n0R(j)=ng*(2./((rmax*r(j)**2.*au/Rg)**7.5+(rmax*r(j)**2.*au/Rg)**12.5))**0.2
  end do

  do i=1,nr
     if (rmax*r(i)**2.*au>=0.1*Rg) then
        ulR(i)=cs(i)*A*exp(B*(rmax*r(i)**2.*au/Rg-0.1))*(rmax*r(i)**2.*au/Rg-0.1)**D
     end if
  end do

  do j=1,nr
     se(j)=2.*n0R(j)*ulR(j)*mu*mH
  end do

  !FUV-evaporation
  do i=1,nr
     if (rmax*r(i)**2.>rfpeak) then
        sf(i)=sf0*(Lf/(10.**31.7))*(rmax*r(i)**2./4.)**(-2.)
     end if
  end do

  !X-ray-evaporation
  do j=1,nr
     if (rmax*r(j)**2.>rxpeak) then
        sx(j)=sx0*(Lx/1.0d30)*(rmax*r(j)**2./2.5)**(-2.)
     end if
  end do

  !Photoevaporation rate (three types of photons put together)
  do k=1,nr
     spe(k)=max(se(k),sf(k),sx(k))
  end do

  !Initial profile of surface density
  sigma(1,1)=0
  sigma(1,nr)=0
  do l=2,nr-1
     sigma(1,l)=(Md0/(2.*pi*(R1*au)*(rmax*au)*r(l)**2.))*exp(-rmax/R1*r(l)**2.)*r(l)**3.
  end do

  open(unit=10, iostat=ios, file='massloss_fortran1.dat', action='write', &
       & form='formatted', status='replace')
  if (ios /= 0) then
     write(*,*) 'Failed to open file for output'
     stop
  end if

  do i=1,nr
     write(10,*) sdiff(i),sf(i),sx(i),spe(i)
  end do

  close(10)

  !Explicit scheme
  do m=1,nt-1
     sigma(m,1)=0
     sigma(m,nr)=0
     do n=2,nr-1
        sigma(m+1,n) = sigma(m,n) + c*(dt/dr**2.)*(sigma(m,n+1)-2*sigma(m,n)+sigma(m,n-1)) - spe(n)*r(n)**3.*tmax*dt
        S(m,n)=sigma(m,n)/(r(n)**3.)
     end do
  end do

  !Where/When the gap is formed
  loop1:do k=2,nt
     loop2:do l=2,int((100./rmax)**(0.5)/dr)
        if (S(k,l)<1.0d-5) then
           write(*,'("T_gap = ",e9.3," yr")') k*tmaxyr*dt
           write(*,'("R_gap = ",f4.1," au")') rmax*r(l)**2.
           exit loop1
        end if
     end do loop2
  end do loop1


  open(unit=20, iostat=ios, file=fname_md, action='write', &
       & form='formatted', status='replace')
  if (ios /= 0) then
     write(*,*) 'Failed to open file for output'
     stop
  end if
  
  !Disk mass
  do m=1,nt
     Md(m)=0.
     do n=1,nr-1
        Md(m)=Md(m)+2.*pi*rmax*r(n)**2.*au*S(m,n)*(r(n+1)**2.-r(n)**2.)*rmax*au
     end do
     write(20,*) Md(m)
     if (Md(m)<Md0*1.0d-8) then
        write(*,'("lifetime = ",e9.3," yr")') m*tmaxyr*dt
        exit
     end if
  end do

  close(20)
  
  open(unit=30, iostat=ios, file=fname_sd, action='write', &
       & form='formatted', status='replace')
  if (ios /= 0) then
     write(*,*) 'Failed to open file for output'
     stop
  end if
  
  !Record data
  do j=1,nr
     write(30,*) (S(i,j),i=1,nt)
  end do

  close(30)

  deallocate(r)
  deallocate(t)
  deallocate(cs)
  deallocate(n0R)
  deallocate(ulR)
  deallocate(sdiff)
  deallocate(sf)
  deallocate(sx)
  deallocate(spe)
  deallocate(sigma)
  deallocate(S)
  
  stop
end program PPDtimeevolution
